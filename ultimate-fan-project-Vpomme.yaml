substitutions:
  device_name: "fan-bedroom"
  friendly_name: "fan bedroom"
  short_name: "bedroom"
  project_name: "athom.relay-x4"
  project_version: "1.2"

esphome:
  name: "${device_name}"
  project:
    name: "${project_name}"
    version: "${project_version}"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  ap:
    ssid: "${device_name} hostspot"
    password: !secret hostspot_password

captive_portal:

logger:

api:

web_server:
  port: 80

ota:

preferences:
  flash_write_interval: 12h

esp8266:
  board: esp8285
  restore_from_flash: true

button:
  - platform: restart
    id: restart_button
    name: "${friendly_name} restart"

sensor:
  - platform: wifi_signal
    name: ${friendly_name} Wifi Signal Strength
    update_interval: 60s
  - platform: uptime
    name: ${friendly_name} Uptime
    disabled_by_default: true
    update_interval: 60s

binary_sensor:
  - platform: gpio
    id: button1
    filters:
      - delayed_on_off: 100ms
    pin:
      number: 5
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - if:
            condition:
              and:
                - lambda: "return id(fan_bedroom).speed == 1;"
                - fan.is_on: fan_bedroom
            then:
              - fan.turn_off: fan_bedroom
            else:
              - fan.turn_on:
                  id: fan_bedroom
                  speed: 1
  - platform: gpio
    id: button2
    filters:
      - delayed_on_off: 100ms
    pin:
      number: 2
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - if:
            condition:
              and:
                - lambda: "return id(fan_bedroom).speed == 2;"
                - fan.is_on: fan_bedroom
            then:
              - fan.turn_off: fan_bedroom
            else:
              - fan.turn_on:
                  id: fan_bedroom
                  speed: 2
  - platform: gpio
    id: button3
    filters:
      - delayed_on_off: 100ms
    pin:
      number: 0
      mode: INPUT_PULLUP
      inverted: true
    on_press:
      then:
        - if:
            condition:
              and:
                - lambda: "return id(fan_bedroom).speed == 3;"
                - fan.is_on: fan_bedroom
            then:
              - fan.turn_off: fan_bedroom
            else:
              - fan.turn_on:
                  id: fan_bedroom
                  speed: 3

switch:
  - platform: gpio
    id: relay1
    pin:
      number: 16
      mode: OUTPUT
      inverted: true
    interlock: &interlock_group [relay1, relay2, relay3]
    interlock_wait_time: 250ms
    on_turn_on:
      - number.set:
          id: speedo
          value: 1
  - platform: gpio
    id: relay2
    pin:
      number: 14
      mode: OUTPUT
      inverted: true
    interlock: *interlock_group
    interlock_wait_time: 250ms
    on_turn_on:
      - number.set:
          id: speedo
          value: 2
  - platform: gpio
    id: relay3
    pin:
      number: 12
      mode: OUTPUT
      inverted: true
    interlock: *interlock_group
    interlock_wait_time: 250ms
    on_turn_on:
      - number.set:
          id: speedo
          value: 3

light:
  - platform: status_led
    name: "${short_name} Status LED"
    disabled_by_default: true
    pin:
      inverted: true
      number: GPIO5

text_sensor:
  - platform: wifi_info
    ip_address:
      name: "${friendly_name} IP Address"
      disabled_by_default: true

fan:
  - platform: speed
    id: fan_bedroom
    output: fan_o
    name: "${short_name}"
    speed_count: 3
    restore_mode: RESTORE_DEFAULT_OFF

output:
  - platform: template
    id: fan_o
    type: float
    write_action:
      - if:
          condition:
            lambda: return ((state == 0));
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay2
            - switch.turn_off: relay3
      - if:
          condition:
            lambda: return ((state > 0) && (state < 0.4));
          then:
            - switch.turn_off: relay2
            - switch.turn_off: relay3
            - switch.turn_on: relay1
      - if:
          condition:
            lambda: return ((state > 0.4) && (state < 0.7));
          then:
            - switch.turn_off: relay1
            - switch.turn_on: relay2
            - switch.turn_off: relay3
      - if:
          condition:
            lambda: return ((state > 0.7));
          then:
            - switch.turn_off: relay1
            - switch.turn_off: relay2
            - switch.turn_on: relay3

number:
  - platform: template
    name: "${friendly_name} speed"
    id: speedo
    icon: mdi:fan
    update_interval: never
    optimistic: true
    min_value: 1
    max_value: 3
    initial_value: 1
    step: 1
    set_action:
      - lambda: !lambda |-
          auto call = id(fan_bedroom).turn_on();
          call.set_speed(x);
          call.perform();
